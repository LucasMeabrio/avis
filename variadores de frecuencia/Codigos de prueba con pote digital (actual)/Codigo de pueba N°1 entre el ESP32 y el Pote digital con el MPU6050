#include <Wire.h>
#include <MPU6050.h>

MPU6050 mpu;

// Pines de conexión para el AR-X9C103S
const int CS_PIN = 15;         // Chip Select
const int INC_PIN = 14;        // Incremento
const int UP_DOWN_PIN = 13;    // Dirección (incremento o decremento)

// Rango de ángulo para mapear a la frecuencia del variador (ajusta según necesidad)
const int ANGLE_MIN = -90;
const int ANGLE_MAX = 90;

void setup() {
  // Configuración de los pines de control
  pinMode(CS_PIN, OUTPUT);
  pinMode(INC_PIN, OUTPUT);
  pinMode(UP_DOWN_PIN, OUTPUT);

  // Inicializar los pines en estado alto
  digitalWrite(CS_PIN, HIGH);
  digitalWrite(INC_PIN, HIGH);
  digitalWrite(UP_DOWN_PIN, HIGH);

  Serial.begin(115200);
  Serial.println("Iniciando el MPU6050 y el potenciómetro digital.");

  Wire.begin();
  mpu.initialize();

  if (mpu.testConnection()) {
    Serial.println("MPU6050 conectado correctamente.");
  } else {
    Serial.println("Error al conectar el MPU6050.");
  }
}

void loop() {
  int16_t ax, ay, az;
  mpu.getAcceleration(&ax, &ay, &az);

  // Calcular el ángulo aproximado en el eje X
  float angleX = atan2(ay, az) * 180 / PI;

  // Mapear el ángulo al rango de pasos para controlar la frecuencia
  int steps = map(angleX, ANGLE_MIN, ANGLE_MAX, 0, 116); // Ajusta 116 para alcanzar 50 Hz en el variador

  Serial.print("Ángulo X: ");
  Serial.print(angleX);
  Serial.print(" | Pasos del potenciómetro: ");
  Serial.println(steps);

  // Ajustar la resistencia en función del ángulo
  adjustResistance(steps);

  delay(500); // Pausa para evitar lecturas rápidas consecutivas
}

void adjustResistance(int steps) {
  // Incrementar la resistencia del potenciómetro
  digitalWrite(UP_DOWN_PIN, HIGH);  // Configurar para incrementar
  digitalWrite(CS_PIN, LOW);        // Activar el potenciómetro

  for (int i = 0; i < steps; i++) {
    pulseIncrement();
    delay(50);  // Pausa entre pasos para observar el cambio
  }

  digitalWrite(CS_PIN, HIGH);       // Desactivar el potenciómetro
}

void pulseIncrement() {
  digitalWrite(INC_PIN, LOW);
  delayMicroseconds(1); // Pulso corto para cambiar el valor
  digitalWrite(INC_PIN, HIGH);
  delayMicroseconds(1);
}
